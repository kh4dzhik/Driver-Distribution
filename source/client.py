# client_agent.py
import socket
import json
import platform
import subprocess
import os
import time

class DriverClientAgent:
    def __init__(self, server_host=None, server_port=8888, client_name=None):
        # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        config = self.load_config()
        self.server_host = server_host or config.get('server_host', 'localhost')
        self.server_port = server_port or config.get('server_port', 8888)
        self.client_name = client_name or config.get('client_name') or f"client_{platform.node()}"
        self.system_info = self.collect_system_info()
        self.client_id = None
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ config.json"""
        config_path = "config.json"
        default_config = {
            "server_host": "localhost",
            "server_port": 8888,
            "client_name": f"client_{platform.node()}"
        }
        
        try:
            if os.path.exists(config_path):
                with open(config_path, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {config_path}")
                return config
            else:
                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                with open(config_path, 'w', encoding='utf-8') as f:
                    json.dump(default_config, f, indent=4, ensure_ascii=False)
                print(f"üìÅ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_path}")
                print("‚ö†Ô∏è  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ config.json")
                return default_config
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return default_config
    
    def collect_system_info(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
        return {
            "os": platform.system(),
            "os_version": platform.version(),
            "architecture": platform.machine(),
            "hostname": platform.node(),
            "processor": platform.processor()
        }
    
    def install_driver(self, driver_path):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥—Ä–∞–π–≤–µ—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        installer_path = driver_path
        
        print(f"üîÑ [{self.client_name}] –ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {os.path.basename(installer_path)}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ–ª–∞–≥ /S
        install_command = [installer_path, "/S"]
        
        try:
            print(f"üíª [{self.client_name}] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å —Ñ–ª–∞–≥–æ–º /S")
            result = subprocess.run(
                install_command, 
                check=True,
                capture_output=True,
                text=True,
                timeout=120  # 2 –º–∏–Ω—É—Ç—ã –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É
            )
            
            print(f"‚úÖ [{self.client_name}] –î—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return {
                "status": "success", 
                "message": "–î—Ä–∞–π–≤–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            }
            
        except subprocess.CalledProcessError as e:
            # –ö–æ–¥ 2 - –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥—Ä–∞–π–≤–µ—Ä–æ–≤
            if e.returncode == 2:
                print(f"‚úÖ [{self.client_name}] –î—Ä–∞–π–≤–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ (–∫–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è 2)")
                return {
                    "status": "success", 
                    "message": "–î—Ä–∞–π–≤–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
                }
            else:
                print(f"‚ùå [{self.client_name}] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e.returncode}")
                return {
                    "status": "failed", 
                    "message": f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∫–æ–¥–æ–º {e.returncode}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é."
                }
                
        except subprocess.TimeoutExpired:
            print(f"‚è∞ [{self.client_name}] –¢–∞–π–º–∞—É—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
            return {
                "status": "error", 
                "message": "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥—Ä–∞–π–≤–µ—Ä–∞"
            }
                
        except Exception as e:
            print(f"‚ùå [{self.client_name}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return {
                "status": "error", 
                "message": f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            }
    
    def safe_json_decode(self, data):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç JSON –¥–∞–Ω–Ω—ã–µ"""
        try:
            if isinstance(data, bytes):
                # –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8
                try:
                    text = data.decode('utf-8').strip()
                except UnicodeDecodeError:
                    # –ï—Å–ª–∏ –Ω–µ UTF-8, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
                    try:
                        text = data.decode('latin-1').strip()
                    except:
                        text = data.decode('utf-8', errors='ignore').strip()
            else:
                text = str(data).strip()
            
            if not text:
                return None
            
            # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ
            text = text.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å { –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è }
            if not text.startswith('{') or not text.endswith('}'):
                print(f"‚ö†Ô∏è [{self.client_name}] –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç: {text[:100]}")
                return None
                
            return json.loads(text)
            
        except json.JSONDecodeError as e:
            print(f"‚ùå [{self.client_name}] –û—à–∏–±–∫–∞ JSON: {e}")
            print(f"üìÑ [{self.client_name}] –î–∞–Ω–Ω—ã–µ: {data[:200] if data else 'empty'}")
            return None
        except Exception as e:
            print(f"‚ùå [{self.client_name}] –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return None
    
    def receive_file_data(self, client_socket, total_size):
        """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∞–π–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        received_data = b""
        received_size = 0
        
        print(f"üì• [{self.client_name}] –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ ({total_size} –±–∞–π—Ç)...")
        
        client_socket.settimeout(30.0)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        
        while received_size < total_size:
            try:
                chunk = client_socket.recv(min(8192, total_size - received_size))
                if not chunk:
                    break
                received_data += chunk
                received_size += len(chunk)
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
                if received_size % (1024 * 1024) == 0:  # –ö–∞–∂–¥—ã–µ 1MB
                    progress = (received_size / total_size) * 100
                    print(f"üì• [{self.client_name}] –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {received_size}/{total_size} –±–∞–π—Ç ({progress:.1f}%)")
                    
            except socket.timeout:
                print(f"‚è∞ [{self.client_name}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
                break
            except Exception as e:
                print(f"‚ùå [{self.client_name}] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                break
                
        print(f"üì• [{self.client_name}] –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {received_size}/{total_size} –±–∞–π—Ç")
        return received_data
    
    def handle_server_commands(self, client_socket):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            while True:
                client_socket.settimeout(2.0)
                
                try:
                    data = client_socket.recv(8192)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±—É—Ñ–µ—Ä
                    if not data:
                        print(f"üì° [{self.client_name}] –°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
                        break
                    
                    message = self.safe_json_decode(data)
                    if not message:
                        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ JSON, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ —Ñ–∞–π–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                        if len(data) > 100:  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –±–æ–ª—å—à–∏–µ, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ñ–∞–π–ª
                            print(f"üì¶ [{self.client_name}] –ü–æ–ª—É—á–µ–Ω—ã –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ({len(data)} –±–∞–π—Ç)")
                        continue
                    
                    action = message.get('action', 'unknown')
                    print(f"üì® [{self.client_name}] –ö–æ–º–∞–Ω–¥–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {action}")
                    
                    if action == 'get_system_info':
                        response = {"system_info": self.system_info}
                        client_socket.send(json.dumps(response).encode())
                        
                    elif action == 'install_driver':
                        driver_name = message.get('driver_name', 'unknown')
                        print(f"üîÑ [{self.client_name}] –ù–∞—á–∏–Ω–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –¥—Ä–∞–π–≤–µ—Ä–∞: {driver_name}")
                        
                        result = self.receive_and_install_driver(client_socket, driver_name)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ —Å–µ—Ä–≤–µ—Ä—É
                        print(f"üì§ [{self.client_name}] –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
                        response_data = json.dumps(result).encode()
                        client_socket.send(response_data)
                        
                    else:
                        print(f"‚ùì [{self.client_name}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {action}")
                        
                except socket.timeout:
                    continue
                except BlockingIOError:
                    continue
                except ConnectionResetError:
                    print(f"üîí [{self.client_name}] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º")
                    break
                except Exception as e:
                    print(f"‚ùå [{self.client_name}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
                    break
                    
        except Exception as e:
            print(f"‚ùå [{self.client_name}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    def receive_and_install_driver(self, client_socket, driver_name: str):
        """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥—Ä–∞–π–≤–µ—Ä —Å —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            client_socket.settimeout(10.0)
            file_info_data = client_socket.recv(2048)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            
            file_info = self.safe_json_decode(file_info_data)
            if not file_info:
                return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ"}
            
            print(f"üì¶ [{self.client_name}] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ: {file_info['name']}, —Ä–∞–∑–º–µ—Ä: {file_info['size']} –±–∞–π—Ç")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            client_socket.send(b'ACK')
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
            received_data = self.receive_file_data(client_socket, file_info['size'])

            if len(received_data) != file_info['size']:
                print(f"‚ùå [{self.client_name}] –ü–æ–ª—É—á–µ–Ω–æ {len(received_data)} –±–∞–π—Ç –≤–º–µ—Å—Ç–æ {file_info['size']}")
                return {"status": "error", "message": "–ù–µ–ø–æ–ª–Ω—ã–π —Ñ–∞–π–ª"}

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            os.makedirs("drivers", exist_ok=True)
            file_path = os.path.join("drivers", file_info['name'])
            
            with open(file_path, 'wb') as f:
                f.write(received_data)

            print(f"‚úÖ [{self.client_name}] –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
            print(f"üîÑ [{self.client_name}] –ó–∞–ø—É—Å–∫–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –¥—Ä–∞–π–≤–µ—Ä–∞...")
            install_result = self.install_driver(file_path)
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(file_path)
                print(f"üßπ [{self.client_name}] –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è [{self.client_name}] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
            
            return install_result
                
        except socket.timeout:
            return {"status": "error", "message": "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞"}
        except Exception as e:
            return {"status": "error", "message": str(e)}
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∞–≥–µ–Ω—Ç"""
        print(f"üöÄ [{self.client_name}] –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞...")
        print(f"üîß [{self.client_name}] –°–∏—Å—Ç–µ–º–∞: {self.system_info['os']} {self.system_info['architecture']}")
        print(f"üåê [{self.client_name}] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É: {self.server_host}:{self.server_port}")
        
        while True:
            try:
                client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                client_socket.settimeout(5.0)
                print(f"üîå [{self.client_name}] –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ {self.server_host}:{self.server_port}...")
                client_socket.connect((self.server_host, self.server_port))
                print(f"‚úÖ [{self.client_name}] –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É {self.server_host}:{self.server_port}")
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                registration = {
                    "action": "register_client",
                    "system_info": self.system_info,
                    "client_name": self.client_name
                }
                client_socket.send(json.dumps(registration).encode())
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                response_data = client_socket.recv(1024)
                response = self.safe_json_decode(response_data)
                
                if response and response.get('status') == 'registered':
                    print(f"üìù [{self.client_name}] –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
                    if 'client_id' in response:
                        self.client_id = response['client_id']
                        print(f"üÜî [{self.client_name}] ID –∫–ª–∏–µ–Ω—Ç–∞: {self.client_id}")
                else:
                    print(f"‚ùå [{self.client_name}] –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response}")
                    client_socket.close()
                    time.sleep(5)
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Å–µ—Ä–≤–µ—Ä–∞
                self.handle_server_commands(client_socket)
                
            except socket.timeout:
                print(f"‚è∞ [{self.client_name}] –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
            except ConnectionRefusedError:
                print(f"‚ùå [{self.client_name}] –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É {self.server_host}:{self.server_port}")
            except Exception as e:
                print(f"‚ùå [{self.client_name}] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            
            print(f"üîÑ [{self.client_name}] –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)

if __name__ == "__main__":
    import sys
    client_name = sys.argv[1] if len(sys.argv) > 1 else None
    client = DriverClientAgent(client_name=client_name)
    client.start()