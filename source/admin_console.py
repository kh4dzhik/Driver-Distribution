# admin_console.py
import os
import json
import shutil
from server_admin import DriverDeploymentServer
import threading
import time

#for tkinter
import customtkinter as ctk
from tkinter import filedialog, messagebox
from CTkListbox import * # for List

import pywinstyles
from functools import partial

class AdminConsole:
    def __init__(self):
        self.server = DriverDeploymentServer()
        self.server_thread = None
        self.selected_clients = None
        self.selected_drivers = None
        self.selected_id = []

    def init_tkinter(self):
        ctk.set_appearance_mode("System")
        ctk.set_default_color_theme("blue")
        app = ctk.CTk()
        app.title("Driver Distribution")
        app.geometry("600x400")
        app.resizable(False, False)
        return app

    def start_server_background(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        def run_server():
            self.server.start_server()
        
        self.server_thread = threading.Thread(target=run_server)
        self.server_thread.daemon = True
        self.server_thread.start()
        time.sleep(1)  # –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
    
    def show_menu(self):
        print("\n" + "="*50)
        print("=== –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–†–ê–ô–í–ï–†–ê–ú–ò ===")
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã")
        print("2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä–∞–π–≤–µ—Ä –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
        print("3. –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –¥—Ä–∞–π–≤–µ—Ä –Ω–∞ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö")
        print("4. –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –¥—Ä–∞–π–≤–µ—Ä –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–µ")
        print("5. –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–π")
        print("6. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥—Ä–∞–π–≤–µ—Ä—ã")
        print("7. –í—ã–π—Ç–∏")
        print("="*50)
    
    def show_connected_clients(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        clients = self.server.get_connected_clients_info()
        print(f"\nüìä –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: {len(clients)}")
        for client_id, client_info in clients.items():
            system_info = client_info.get('system_info', {})
            os_name = system_info.get('os', 'unknown')
            print(f"   - {client_id}: {os_name} ({client_info['address']})")
    
    def upload_driver(self, pPath, pList):
        """–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥—Ä–∞–π–≤–µ—Ä—ã"""
        driver_paths = pPath
        for pPath in driver_paths:
            if os.path.exists(pPath):
                # –ö–æ–ø–∏—Ä—É–µ–º –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                target_path = os.path.join(self.server.drivers_dir, os.path.basename(pPath))
                shutil.copy2(pPath, target_path)
                print(f"‚úÖ –î—Ä–∞–π–≤–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω: {os.path.basename(pPath)}")
                self.update_drivers_list(pList)
            else:
                print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def create_test_drivers(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥—Ä–∞–π–≤–µ—Ä—ã"""
        test_drivers = [
            {"name": "nvidia_windows.exe", "content": "NVIDIA Driver for Windows"},
            {"name": "amd_linux.deb", "content": "AMD Driver for Linux"}, 
            {"name": "intel_network.inf", "content": "Intel Network Driver"},
            {"name": "realtek_audio_windows.zip", "content": "Realtek Audio Driver"}
        ]
        
        for driver in test_drivers:
            path = os.path.join(self.server.drivers_dir, driver["name"])
            with open(path, 'w') as f:
                f.write(driver["content"])
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥—Ä–∞–π–≤–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã:")
        for driver in test_drivers:
            print(f"   - {driver['name']}")
    
    def show_drivers_list(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥—Ä–∞–π–≤–µ—Ä–æ–≤"""
        drivers = self.server.get_driver_list()
        print(f"\nüì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥—Ä–∞–π–≤–µ—Ä—ã: {len(drivers)}")
        for i, driver in enumerate(drivers, 1):
            print(f"   {i}. {driver['name']} ({driver['size']} –±–∞–π—Ç)")
        return drivers
    
    def mass_deploy(self):
        """–ú–∞—Å—Å–æ–≤–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥—Ä–∞–π–≤–µ—Ä–∞"""
        if self.server.get_connected_clients_count() == 0:
            print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
            return
            
        drivers = self.show_drivers_list()
        if not drivers:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥—Ä–∞–π–≤–µ—Ä–æ–≤")
            return
            
        try:
            choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä–∞–π–≤–µ—Ä: ")) - 1
            if 0 <= choice < len(drivers):
                driver_name = drivers[choice]['name']
                print(f"üîÑ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ {driver_name} –Ω–∞ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö...")
                results = self.server.mass_deploy(driver_name)
                
                print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:")
                for client, result in results.items():
                    status_icon = "‚úÖ" if result['status'] == 'success' else "‚ùå"
                    if result['status'] == 'skipped':
                        status_icon = "‚ö†Ô∏è"
                    print(f"   {status_icon} {client}: {result['status']} - {result.get('message', '')}")
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    
    def deploy_to_specific_client(self):
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–µ"""
        clients = self.server.get_connected_clients_info()
        if not clients:
            print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
            return
            
        print("\nüìã –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:")
        client_list = list(clients.keys())
        for i, client_id in enumerate(client_list, 1):
            print(f"   {i}. {client_id}")
            
        try:
            client_choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞: ")) - 1
            if 0 <= client_choice < len(client_list):
                client_id = client_list[client_choice]
                
                # –ü–æ–ª—É—á–∞–µ–º socket –∫–ª–∏–µ–Ω—Ç–∞
                client_socket = self.server.get_client_socket(client_id)
                if not client_socket:
                    print("‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
                    return
                    
                drivers = self.show_drivers_list()
                
                if drivers:
                    driver_choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä–∞–π–≤–µ—Ä: ")) - 1
                    if 0 <= driver_choice < len(drivers):
                        driver_name = drivers[driver_choice]['name']
                        print(f"üîÑ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ {driver_name} –Ω–∞ {client_id}...")
                        
                        result = self.server.deploy_to_client(client_socket, driver_name)
                        
                        status_icon = "‚úÖ" if result['status'] == 'success' else "‚ùå"
                        print(f"   {status_icon} –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['status']} - {result.get('message', '')}")
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –¥—Ä–∞–π–≤–µ—Ä–∞")
                else:
                    print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥—Ä–∞–π–≤–µ—Ä–æ–≤")
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    
    def update_client_list(self, pList):
        pList.delete("all")
        clients = self.server.get_connected_clients_info()

        for client_id, client_info in clients.items():
            system_ip = client_info.get('address')
            pList.insert(client_id, system_ip)

    def update_drivers_list(self, pList):
        drivers = self.server.get_driver_list()
        #print(f"\nüì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥—Ä–∞–π–≤–µ—Ä—ã: {len(drivers)}")
        
        # for i, driver in enumerate(drivers, 1):
        #     print(f"   {i}. {driver['name']} ({driver['size']} –±–∞–π—Ç)")

        for i, driver in enumerate(drivers, 1):
            pList.insert(i, f"{driver['name']} {driver['size']} –±–∞–π—Ç")

    def get_client_id_by_ip(self, ip_address: str) -> str | None:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç client_id –ø–æ IP-–∞–¥—Ä–µ—Å—É –∫–ª–∏–µ–Ω—Ç–∞"""
        with self.server.clients_lock:
            for client_id, client_info in self.server.connected_clients.items():
                client_ip = client_info['address'][0]  # –∞–¥—Ä–µ—Å –≤–∏–¥–∞ (ip, port)
                if client_ip == ip_address:
                    return client_id
        return None

    def show_value(self, selected_option):
        print(selected_option)

    def save_value_users(self, selected_option):
        self.selected_clients = selected_option

    def save_value_drivers(self, selected_option):
        self.selected_drivers = selected_option
        
    def deploy_driver_to_clients(self):
        if not self.selected_clients or not self.selected_drivers:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –¥—Ä–∞–π–≤–µ—Ä—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
            return
            
        self.selected_id = []
        clients = self.server.get_connected_clients_info()

        # –°–æ–±–∏—Ä–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        for client_id, client_info in clients.items():
            system_ip = client_info.get('address')
            for client_ip in self.selected_clients:
                if client_ip == system_ip:
                    self.selected_id.append(client_id)
        
        if not self.selected_id:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å")
            return
            
        print(f"üéØ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–æ–≤ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: {self.selected_id}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_window = ctk.CTkToplevel()
        progress_window.title("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–æ–≤")
        progress_window.geometry("400x200")
        progress_window.transient(self.init_tkinter())
        progress_window.grab_set()
        
        progress_label = ctk.CTkLabel(progress_window, text="–ù–∞—á–∏–Ω–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –¥—Ä–∞–π–≤–µ—Ä–æ–≤...", font=("Arial", 14))
        progress_label.pack(pady=20)
        
        progress_bar = ctk.CTkProgressBar(progress_window, width=300)
        progress_bar.pack(pady=10)
        progress_bar.set(0)
        
        results_text = ctk.CTkTextbox(progress_window, width=350, height=100)
        results_text.pack(pady=10, padx=20, fill="both", expand=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_deployment():
            total_operations = len(self.selected_id) * len(self.selected_drivers)
            completed_operations = 0
            
            for client_id in self.selected_id:
                client_socket = self.server.get_client_socket(client_id)
                if not client_socket:
                    results_text.insert("end", f"‚ùå –ö–ª–∏–µ–Ω—Ç {client_id} –æ—Ç–∫–ª—é—á–∏–ª—Å—è\n")
                    results_text.see("end")
                    completed_operations += len(self.selected_drivers)
                    continue
                    
                for driver_name in self.selected_drivers:
                    try:
                        results_text.insert("end", f"üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ {driver_name} –Ω–∞ {client_id}...\n")
                        results_text.see("end")
                        progress_window.update()
                        
                        result = self.server.deploy_to_client(client_socket, driver_name)
                        
                        status_icon = "‚úÖ" if result['status'] == 'success' else "‚ùå"
                        if result['status'] == 'skipped':
                            status_icon = "‚ö†Ô∏è"
                            
                        results_text.insert("end", f"{status_icon} {client_id}: {result['status']} - {result.get('message', '')}\n")
                        results_text.see("end")
                        
                    except Exception as e:
                        results_text.insert("end", f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n")
                        results_text.see("end")
                    
                    completed_operations += 1
                    progress = completed_operations / total_operations
                    progress_bar.set(progress)
                    progress_label.configure(text=f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {completed_operations}/{total_operations}")
                    progress_window.update()
            
            progress_label.configure(text="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            close_button = ctk.CTkButton(progress_window, text="–ó–∞–∫—Ä—ã—Ç—å", command=progress_window.destroy)
            close_button.pack(pady=10)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        deployment_thread = threading.Thread(target=run_deployment)
        deployment_thread.daemon = True
        deployment_thread.start()

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –∫–æ–Ω—Å–æ–ª—å"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞–º–∏...")
        self.start_server_background()
        self.create_test_drivers()  # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥—Ä–∞–π–≤–µ—Ä—ã
        pApp = self.init_tkinter()

        # –†–∞–±–æ—Ç–∞ —Å —Ç–∫–∏–Ω—Ç–µ—Ä–æ–º
        clientList = CTkListbox(pApp, command=self.save_value_users, width=200, height=100, multiple_selection=True)
        clientList.place(x=20, y=50)

        update_button = ctk.CTkButton(pApp, text="–û–±–Ω–æ–≤–∏—Ç—å", command=lambda: self.update_client_list(clientList))
        update_button.place(x=20, y=200)

        list_label = ctk.CTkLabel(pApp, text="–°–ø–∏—Å–æ–∫ –£—Å—Ç—Ä–æ–π—Å—Ç–≤", font=("Arial", 16))
        list_label.place(x=20, y=30)

        driverList = CTkListbox(pApp, command=self.save_value_drivers, width=200, height=100, multiple_selection=True)
        driverList.place(x=350, y=50)
        
        # Drag and drop —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–¥–∞
        wrapper_func = partial(self.upload_driver, pList=driverList)
        pywinstyles.apply_dnd(driverList, wrapper_func)
        
        self.update_drivers_list(driverList)

        driver_list_label = ctk.CTkLabel(pApp, text="–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥—Ä–∞–π–≤–µ—Ä—ã", font=("Arial", 16))
        driver_list_label.place(x=350, y=30)
        driver_list_label2 = ctk.CTkLabel(pApp, text="–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã —Å—é–¥–∞", font=("Arial", 12))
        driver_list_label2.place(x=350, y=175)

        deploy_button = ctk.CTkButton(pApp, text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä–∞–π–≤–µ—Ä—ã", command=self.deploy_driver_to_clients)
        deploy_button.place(x=350, y=200)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –≤—ã–±–æ—Ä–∞
        clear_button = ctk.CTkButton(pApp, text="–û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä", command=lambda: self.clear_selection(clientList, driverList))
        clear_button.place(x=20, y=240)

        pApp.mainloop()

    def clear_selection(self, client_list, driver_list):
        """–û—á–∏—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –∏ –¥—Ä–∞–π–≤–µ—Ä—ã"""
        client_list.deselect("all")
        driver_list.deselect("all")
        self.selected_clients = None
        self.selected_drivers = None
        print("‚úÖ –í—ã–±–æ—Ä –æ—á–∏—â–µ–Ω")

if __name__ == "__main__":
    admin = AdminConsole()
    admin.run()